# -*- coding: utf-8 -*-
"""employee_performance_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eCZcm5YgT8KhpS737t28pVSuD3iWVDBL

Importing Necessary Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

"""Loading Dataset"""

# Load dataset
url = "https://raw.githubusercontent.com/amged-alamari/Employee-Satisfaction/main/WA_Fn-UseC_-HR-Employee-Attrition.csv"
df = pd.read_csv(url)

"""Removing irrelevant columns in dataframe"""

df.drop(columns=["EmployeeNumber", "Over18", "StandardHours", "EmployeeCount"], inplace=True)

"""Encoding Categorical Columns

"""

label_encoders = {}
for col in df.select_dtypes(include='object').columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

"""Distribution of Performance Ratings"""

print("Performance Rating Counts:\n", df["PerformanceRating"].value_counts())

"""Plot Distribution of Performance Ratings"""

plt.figure(figsize=(6, 4))
sns.countplot(x='PerformanceRating', data=df, palette='Set2')
plt.title("Distribution of Performance Ratings")
plt.tight_layout()
plt.show()

"""Define features and target"""

X = df.drop(columns=["PerformanceRating"])
y = df["PerformanceRating"]

"""Split into train and test sets"""

X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)

"""Training the model"""

rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)

"""Predictions and Evaluations"""

y_pred = rf.predict(X_test)
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

"""Plotting Confusion Matrix"""

conf_mat = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.tight_layout()
plt.show()

"""Feature Importances"""

importances = pd.DataFrame({
    "Feature": X.columns,
    "Importance": rf.feature_importances_
}).sort_values(by="Importance", ascending=False)

"""Plotting Feature Importances"""

plt.figure(figsize=(10, 6))
sns.barplot(data=importances.head(10), x="Importance", y="Feature", palette="viridis")
plt.title("Top 10 Feature Importances for Predicting Performance Rating")
plt.tight_layout()
plt.show()

"""Boxplots for the top theree Features"""

top_features = importances.head(3)['Feature'].tolist()
for feature in top_features:
    plt.figure(figsize=(6, 4))
    sns.boxplot(x='PerformanceRating', y=feature, data=df, palette='Set3')
    plt.title(f"{feature} by Performance Rating")
    plt.tight_layout()
    plt.show()